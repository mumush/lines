<script>

window.onload = function(challengeUser) {


   // **** Get Client Cookies Sent From Server ****

   var cookieToken = docCookies.getItem('linesApp');
   var cookieUsername = docCookies.getItem('linesAppUser');

   console.log('Client Token: ' + cookieToken);
   console.log('Client Username: ' + cookieUsername);


   // **** Initialize Socket IO ****

   var socket = io(); // Default to connect to host that serves page


   // **** Initialize Online Users & Chat ****

   var onlineUsers = <%- JSON.stringify(users) %>; // 'users' passed in via EJS

   init(onlineUsers);


   // **** Start Socket IO Events ****

   // Immediately emit that user is online
   socket.emit('go online', {username: cookieUsername});

   // When a new user goes online
   socket.on('user online', function(username) {
      addOnlineUser(username);
      console.log(username + ' is online.');
   });

   // When a new user goes online
   socket.on('user offline', function(username) {
      removeOnlineUser(username);
      console.log(username + ' went offline.');
   });

   // When a user has sent a chat message
   socket.on('new chat message', function(message) {
      console.log(message.sender + ' says: ' + message.body);
      appendChatMessage(message);
   });

   // When another user challenges you to a game
   socket.on('challenge user', function(challenger) {
      console.log('Received a challege from ' + challenger);

      // Show a modal message allowing user to accept or deny a challenge
      displayChallengeModal(challenger);
   });


   // **** DOM Methods ****

   function init(users) {

      // Add all users that are currently online to the list of users
      for( var i=0; i<users.length; i++ ) {
         addOnlineUser(users[i].username);
      }

      // Set the submit handler for the form
      $('#compose-message-form').on('submit', function(){ sendMessage(event) });

   }

   function addOnlineUser(username) {

      var newUserItem = $('<li>');
      newUserItem.addClass('online-user');
      newUserItem.attr('id', ('user-' + username));
      newUserItem.text(username);

      var challengeUserBut = $('<button>');
      challengeUserBut.on('click', function(){ challengeUser(username, challengeUserBut); });
      challengeUserBut.text('Challenge');

      newUserItem.append(challengeUserBut);

      $('#online-users-list').prepend(newUserItem);
   }

   function removeOnlineUser(username) {
      var attrSelector = "#user-" + username;
      var userListItem = $(attrSelector);
      userListItem.remove();
   }

   function appendChatMessage(message) {

      // This is either our message, or someone else's

      if( message.sender === cookieUsername ) { // It's our message, make it blue
         var messageClass = "my-message";
      }
      else { // it's not ours, make it grey
         var messageClass = "not-my-message";
      }

      $('#messages-list').append($("<li class='message " + messageClass + "'><span class='sender'>" + message.sender + "</span><span class='body'>" + message.body + "</span></li>"));

   }

   function displayChallengeModal(challenger) {

      var challengeModal = "<div id='challenge-modal'><p><span id='challenger-username'>" + challenger + "</span> wants to play!</p>";
      challengeModal += "<div class='action-container'><button id='accept-challenge-but'>Accept</button><button id='reject-challenge-but'>Reject</button></div></div>";

      $(document.body).prepend(challengeModal);

      $('#accept-challenge-but').on('click', acceptChallenge);
      $('#reject-challenge-but').on('click', rejectChallenge);

   }


   // **** Onclick/Onsubmit Methods ****

   function acceptChallenge() {

      var challenger = $('#challenger-username').text();
      console.log('Accepted challenge from: ' + challenger);

      socket.emit('challenge accepted', {challenger: challenger, challengee: cookieUsername});

      $('#challenge-modal').remove();

   }

   function rejectChallenge() {

      var challenger = $('#challenger-username').text();
      console.log('Rejected challenge from: ' + challenger);

      // Consider sending a modal to the user if there's time
      //socket.emit('challenge rejected', {challenger: challenger, challengee: cookieUsername});

      $('#challenge-modal').remove();

   }

   function challengeUser(opponentUsername, challengeButton) {
      console.log('Challenge User: ' + opponentUsername);
      socket.emit('challenge request', {sender: cookieUsername, opponent: opponentUsername});
   }

   function sendMessage(event) {
      event.preventDefault();
      var message = $('#message-input').val();
      console.log('Send Message: ' + message);

      // DO VALIDATION CHECKS HERE
      socket.emit('send chat message', {sender: cookieUsername, body: message});
   }



   // **************** GAME LOGIC ****************

   var svgEle = document.getElementsByTagName('svg')[0];
   var svgns = "http://www.w3.org/2000/svg";

   buildBoard();

   // **** Socket IO Game Events ****

   socket.on('initialize game', function(data) {
      console.log('Initializing game...');
      //buildBoard();

      // Change text to who's turn it is -> data.currentTurn

      // Check if it's my turn
      // If it is, enable the gameboard (add all event listeners)

      // ******* WHEN INITIALIZING THE BOARD, DON'T ADD ANY LISTENERS
      // ADD LISTENERS (THROUGH FUNCTION) IF IT'S THE PLAYERS TURN, IF IT'S NOT, REMOVE THEM

      // WHEN SENDING 'make move', SUPPLY THE COORDINATES ALONG WITH THE ATTR'S OF THE LINE
      // MIGHT NOT BE A NEED FOR THE ATTR NAMES, USING A STANDARD ORDER COULD BE FINE

      // AFTER SENDING 'make move' TO THE SERVER, SEND 'new turn' TO BOTH SOCKETS, AND REPEAT THE ABOVE PROCESS
      // IN 'new turn', SUPPLY THE LAST MOVE MADE, UPDATE THE UI (CHANGE COLOR OF LINES/REMOVE CLICK LISTENER), AND THEN ENABLE THE

   });


   // **** Game DOM Methods ****

   function buildBoard() {

      console.log('Building board...');

      for( var i=0; i<=400; i+=100) {
         for(var j=0; j<4; j++) {
            var line = document.createElementNS(svgns, 'line');
            line.setAttributeNS(null, 'x1', (j * 100));
            line.setAttributeNS(null, 'x2', (j * 100)+100);
            line.setAttributeNS(null, 'y1', i);
            line.setAttributeNS(null, 'y2', i);
            line.setAttributeNS(null, 'stroke', 'red');
            line.setAttributeNS(null, 'stroke-width', '6px');
            line.setAttributeNS(null, 'class', 'gameboard-line');
            line.setAttributeNS(null, 'style', 'cursor: pointer');
            svgEle.appendChild(line);
         }
      }
      for( var i=0; i<=400; i+=100) {
         for(var j=0; j<=4; j++) {
            var line = document.createElementNS(svgns, 'line');
            line.setAttributeNS(null, 'x1', i);
            line.setAttributeNS(null, 'x2', i);
            line.setAttributeNS(null, 'y1', j * 100);
            line.setAttributeNS(null, 'y2', (j * 100)+100);
            line.setAttributeNS(null, 'stroke', 'red');
            line.setAttributeNS(null, 'stroke-width', '6px');
            line.setAttributeNS(null, 'class', 'gameboard-line');
            line.setAttributeNS(null, 'style', 'cursor: pointer');
            svgEle.appendChild(line);
         }
      }

      // Register an onclick listener for each of the lines
      // Adding in above loop would yield -> function is out of svg namespace
      $('.gameboard-line').bind('click', function(event) {
         lineClicked(event);
      });
   }

   function lineClicked(event) {

      console.log('Line clicked x1: ' + $(event.target).attr('x1'));

      // Send the coordinates of the line to the socket
      //socket.emit('make move', {sender: cookieUsername, body: message});
   }


};

</script>
