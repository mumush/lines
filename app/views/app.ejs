<script>

window.onload = function(challengeUser) {

   // **** Get Client Cookies Sent From Server ****

   var cookieToken = docCookies.getItem('linesApp');
   var cookieUsername = docCookies.getItem('linesAppUser');

   console.log('Client Token: ' + cookieToken);
   console.log('Client Username: ' + cookieUsername);

   // **** Initialize Socket IO ****

   var socket = io(); // Default to connect to host that serves page


   // **** Initialize Online Users & Chat ****

   var onlineUsers = <%- JSON.stringify(users) %>; // 'users' passed in via EJS

   init(onlineUsers);


   // **** Start Socket IO Events ****

   // Immediately emit that user is online
   socket.emit('go online', {username: cookieUsername});

   // When a new user goes online
   socket.on('user online', function(username) {
      addOnlineUser(username);
      console.log(username + ' is online.');
   });

   // When a new user goes online
   socket.on('user offline', function(username) {
      removeOnlineUser(username);
      console.log(username + ' went offline.');
   });

   // When a user has sent a chat message
   socket.on('new chat message', function(message) {
      console.log(message.sender + ' says: ' + message.body);
      appendChatMessage(message);
   });

   // When another user challenges you to a game
   socket.on('challenge user', function(challenger) {
      console.log('Received a challege from ' + challenger);

      // Show a modal message allowing user to accept or deny a challenge
      displayChallengeModal(challenger);
   });


   // **** Socket IO Game Events ****

   socket.on('initialize game', function(data) {
      console.log('Initializing game...');
   });



   // **** DOM Methods ****

   function init(users) {

      // Add all users that are currently online to the list of users
      for( var i=0; i<users.length; i++ ) {
         addOnlineUser(users[i].username);
      }

      // Set the submit handler for the form
      $('#compose-message-form').on('submit', function(){ sendMessage(event) });

   }

   function addOnlineUser(username) {

      var newUserItem = $('<li>');
      newUserItem.addClass('online-user');
      newUserItem.attr('id', ('user-' + username));
      newUserItem.text(username);

      var challengeUserBut = $('<button>');
      challengeUserBut.on('click', function(){ challengeUser(username, challengeUserBut); });
      challengeUserBut.text('Challenge');

      newUserItem.append(challengeUserBut);

      $('#online-users-list').prepend(newUserItem);
   }

   function removeOnlineUser(username) {
      var attrSelector = "#user-" + username;
      var userListItem = $(attrSelector);
      userListItem.remove();
   }

   function appendChatMessage(message) {

      // This is either our message, or someone else's

      if( message.sender === cookieUsername ) { // It's our message, make it blue
         var messageClass = "my-message";
      }
      else { // it's not ours, make it grey
         var messageClass = "not-my-message";
      }

      $('#messages-list').append($("<li class='message " + messageClass + "'><span class='sender'>" + message.sender + "</span><span class='body'>" + message.body + "</span></li>"));

   }

   function displayChallengeModal(challenger) {

      var challengeModal = "<div id='challenge-modal'><p><span id='challenger-username'>" + challenger + "</span> wants to play!</p>";
      challengeModal += "<div class='action-container'><button id='accept-challenge-but'>Accept</button><button id='reject-challenge-but'>Reject</button></div></div>";

      $(document.body).prepend(challengeModal);

      $('#accept-challenge-but').on('click', acceptChallenge);
      $('#reject-challenge-but').on('click', rejectChallenge);

   }


   // **** Onclick/Onsubmit Methods ****

   function acceptChallenge() {

      var challenger = $('#challenger-username').text();
      console.log('Accepted challenge from: ' + challenger);

      socket.emit('challenge accepted', {challenger: challenger, challengee: cookieUsername});

      $('#challenge-modal').remove();

   }

   function rejectChallenge() {

      var challenger = $('#challenger-username').text();
      console.log('Rejected challenge from: ' + challenger);

      // Consider sending a modal to the user if there's time
      //socket.emit('challenge rejected', {challenger: challenger, challengee: cookieUsername});

      $('#challenge-modal').remove();

   }

   function challengeUser(opponentUsername, challengeButton) {
      console.log('Challenge User: ' + opponentUsername);
      socket.emit('challenge request', {sender: cookieUsername, opponent: opponentUsername});
   }

   function sendMessage(event) {
      event.preventDefault();
      var message = $('#message-input').val();
      console.log('Send Message: ' + message);

      // ***** DO VALIDATION CHECKS HERE *****
      socket.emit('send chat message', {sender: cookieUsername, body: message});
   }



};

</script>
