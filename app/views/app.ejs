<script>

window.onload = function() {


   // **** Get Client Cookies Sent From Server ****

   var cookieToken = docCookies.getItem('linesApp');
   var cookieUsername = docCookies.getItem('linesAppUser');

   console.log('Client Token: ' + cookieToken);
   console.log('Client Username: ' + cookieUsername);


   // **** Initialize Socket IO ****

   var socket = io(); // Default to connect to host that serves page


   // **** Initialize Online Users & Chat ****

   var onlineUsers = <%- JSON.stringify(users) %>; // 'users' passed in via EJS

   init(onlineUsers);


   // **** Start Socket IO Events ****

   // Immediately emit that user is online
   socket.emit('go online', {username: cookieUsername});

   // When a new user goes online
   socket.on('user online', function(username) {
      addOnlineUser(username);
      console.log(username + ' is online.');
   });

   // When a new user goes online
   socket.on('user offline', function(username) {
      removeOnlineUser(username);
      console.log(username + ' went offline.');
   });

   // When a user has sent a chat message
   socket.on('new chat message', function(message) {
      console.log(message.sender + ' says: ' + message.body);
      appendChatMessage(message);
   });

   // **** Socket IO Game Events ****

   socket.on('initialize game', function(data) {
      initializeGame(data);
   });

   // When any user challenges another user (so we can update the UI)
   socket.on('pending challenge', function(data) {
      console.log('A user has challenged someone: ' + data.users[0] + ' ' + data.users[1] );
      toggleUsersInGame(data.users, true);
   });

   // When any user rejects a challenge from another user
   socket.on('pending challenge rejected', function(data) {
      console.log('A user has rejected a challenge from someone: ' + data.users[0] + ' ' + data.users[1] );
      toggleUsersInGame(data.users, false);
   });

   // When another user finishes a game, update them on the list of users
   socket.on('user done game', function(username) {
      appendChallengeButton(username);
      console.log(username + ' done game.');
   });

   // When another user challenges you to a game
   socket.on('challenge user', function(challenger) {
      console.log('Received a challege from ' + challenger);

      // Show a modal message allowing user to accept or deny a challenge
      displayChallengeModal(challenger);
   });

   // When the game is over (no more moves or a user left the game, ie. disconnected)
   socket.on('game over', function(data) {
      console.log('Game over.  The winner is: ' + data.winner);
      // Check if we won, if we did show a modal
      // Clean up the board
      cleanupBoard();
   });

   socket.on('my turn', function(data) {

      console.log('My turn!');

      toggleTurnIndicator(true); // Shows the user it's their turn

      // Enable interaction with the lines
      toggleLineListeners(true);

      if( data.opponentsMove != null ) { // Will only be null on first turn of game

         console.log('Update UI for opponents move x1: ' + data.opponentsMove.x1);

         var lineToUpdate = getLineByAttrs(data.opponentsMove);
         lineToUpdate.css('stroke', 'red');
         lineToUpdate.css('stroke-width', '6px');

      }

   });

   socket.on('valid move', function(data) {

      // Disable interaction with the lines
      //toggleLineListeners(false);

      console.log('Valid move.');

      var lineToUpdate = getLineByAttrs(data.line);
      lineToUpdate.css('stroke', 'green');
      lineToUpdate.css('stroke-width', '6px');

      // Update score for player
      // 

      //
      // socket.emit('done turn', {gameRoom: docCookies.getItem('linesAppGameRoom'), mover: cookieUsername, coordinates: data.coordinates});
      //
      // toggleTurnIndicator(false);

   });

   socket.on('invalid move', function() {

      console.log('Invalid move - choose a different line.');

      // Show modal identifying that the move isn't valid (brief alert that dissappears)
      showInvalidMoveModal();

   });


   // **** DOM Methods ****

   function init(users) {

      // Add all users that are currently online to the list of users
      for( var i=0; i<users.length; i++ ) {
         addOnlineUser(users[i].username);
      }

      // Set the submit handler for the form
      $('#compose-message-form').on('submit', function(event) {
         event.preventDefault();
         sendMessage();
      });

   }

   function addOnlineUser(username) {

      var newUserItem = $('<li>');
      newUserItem.addClass('online-user');
      newUserItem.attr('id', ('user-' + username));
      newUserItem.text(username);

      var challengeUserBut = $('<button>');
      var eventData = {username: username, challengeUserBut: challengeUserBut};
      challengeUserBut.on('click', eventData, function(e){ challengeUser(e.data.username, e.data.challengeUserBut); });
      challengeUserBut.text('Challenge');

      newUserItem.append(challengeUserBut);

      $('#online-users-list').prepend(newUserItem);
   }

   function removeOnlineUser(username) {
      var attrSelector = "#user-" + username;
      var userListItem = $(attrSelector);
      userListItem.remove();
   }

   function toggleUsersInGame(users, areInGame) {

      for( var i=0; i<users.length; i++) {

         var attrSelector = "#user-" + users[i];
         var userListItem = $(attrSelector);

         if( userListItem.length != 0 && areInGame ) { // If this user is on the DOM and they're in a game
            userListItem.find('button').remove();
         }
         else if( userListItem.length != 0 && !areInGame ) { // If this user is on the DOM and they're not in a game
            // Create a challenge button and append it to the users list item
            var challengeUserBut = $('<button>');
            var eventData = {username: users[i], challengeUserBut: challengeUserBut};
            challengeUserBut.on('click', eventData, function(e){ challengeUser(e.data.username, e.data.challengeUserBut); });
            challengeUserBut.text('Challenge');

            userListItem.append(challengeUserBut);
         }

      } // End for loop

   }

   function appendChatMessage(message) {

      // This is either our message, or someone else's

      if( message.sender === cookieUsername ) { // It's our message, make it blue
         var messageClass = "my-message";
      }
      else { // it's not ours, make it grey
         var messageClass = "not-my-message";
      }

      $('#messages-list').append($("<li class='message " + messageClass + "'><span class='sender'>" + message.sender + "</span><span class='body'>" + message.body + "</span></li>"));

   }

   function appendChallengeButton(username) {

      var attrSelector = "#user-" + username;
      var userListItem = $(attrSelector);

      if( userListItem.length != 0 ) { // If this user is on the DOM
         var challengeUserBut = $('<button>');
         var eventData = {username: username, challengeUserBut: challengeUserBut};
         challengeUserBut.on('click', eventData, function(e){ challengeUser(e.data.username, e.data.challengeUserBut); });
         challengeUserBut.text('Challenge');

         userListItem.append(challengeUserBut);
      }

   }

   function displayChallengeModal(challenger) {

      var challengeModal = "<div id='challenge-modal'><p><span id='challenger-username'>" + challenger + "</span> wants to play!</p>";
      challengeModal += "<div class='action-container'><button id='accept-challenge-but'>Accept</button><button id='reject-challenge-but'>Reject</button></div></div>";

      $(document.body).prepend(challengeModal);

      $('#accept-challenge-but').on('click', acceptChallenge);
      $('#reject-challenge-but').on('click', rejectChallenge);

   }

   function showInvalidMoveModal() {

      var invalidMoveModal = "<div class='invalid-move-modal'>You can't move there - choose another line!</div>";

      $(document.body).prepend(invalidMoveModal);

      setTimeout(function() {
         $('.invalid-move-modal').fadeOut('fast').remove();
      }, 4000); // 4 seconds

   }

   function toggleTurnIndicator(itsMyTurn) { // if true, show .my-turn-indicator at full opacity
      if(itsMyTurn) {
         $('.my-turn-indicator').text('Your turn.');
         $('.my-turn-indicator').fadeTo('fast', 0.95);
      }
      else {
         $('.my-turn-indicator').text("Opponent's turn.");
         $('.my-turn-indicator').fadeTo('fast', 0.35);
      }
   }


   // **** Onclick/Onsubmit Methods ****

   function acceptChallenge() {

      var challenger = $('#challenger-username').text();
      console.log('Accepted challenge from: ' + challenger);

      socket.emit('challenge accepted', {challenger: challenger, challengee: cookieUsername});

      $('#challenge-modal').remove();

   }

   function rejectChallenge() {

      var challenger = $('#challenger-username').text();
      console.log('Rejected challenge from: ' + challenger);

      // Consider sending a modal to the user if there's time
      socket.emit('challenge rejected', {challenger: challenger, challengee: cookieUsername});

      $('#challenge-modal').remove();

   }

   function challengeUser(opponentUsername, challengeButton) {
      console.log('Challenge User: ' + opponentUsername);
      socket.emit('challenge request', {sender: cookieUsername, opponent: opponentUsername});
   }

   function sendMessage() {

      var escapedMessage = $('#message-input').val().replace(/[^\w\s,'-.?!]/gi, '');
      escapedMessage = escapedMessage.trim();

      if( escapedMessage != "" ) { // If the message isn't empty
         console.log('Send Message: ' + escapedMessage);
         socket.emit('send chat message', {sender: cookieUsername, body: escapedMessage});
      }

      $('#message-input').val("");

   }



   // **************** GAME LOGIC ****************

   var svgEle = document.getElementsByTagName('svg')[0];
   var svgns = "http://www.w3.org/2000/svg";

   // **** Game DOM Methods ****

   function initializeGame(gameData) {

      console.log('Initializing game...');

      // Store the gameID and the room in cookies so we can pass them around events
      docCookies.setItem('linesAppGame', gameData.gameID);
      docCookies.setItem('linesAppGameRoom', gameData.gameRoom);

      buildBoard();
      createScoreboard(gameData.players);

      // Now set the board to display block so it's visible
      $('#gameboard-container').show();

      console.log('First turn user:' + gameData.firstTurn);
      if( gameData.firstTurn == cookieUsername ) { // I go first

         console.log('I go first!'); // Consider showing a popup saying that you go first or second here

         socket.emit('start game');
      }

   }

   // Initialize the scoreboard with both players' usernames, starting with a score of zero
   function createScoreboard(players) {

      console.log('Creating scoreboard...');

      if(players[0] == cookieUsername) { // first index [0] in the players array is us
         $('.my-score-container .username').text(players[0]);
         $('.opponent-score-container .username').text(players[1]);
      }
      else { // players[1] is us
         $('.my-score-container .username').text(players[1]);
         $('.opponent-score-container .username').text(players[0]);
      }

      // Set both players starting scores to zero
      $('.my-score-container .score').text("0");
      $('.opponent-score-container .score').text("0");

      // Initialize both players' turns to be 'opponents turn' until a first turn has been sent
      toggleTurnIndicator(false);

   }

   function buildBoard() {

      console.log('Building board...');

      drawHorizLines();
      drawVertLines();

   }

   function drawHorizLines() {

      var hY = 0;

      for( var i=0; i<=300; i+=100) {
         var hX = 0;
         for(var j=0; j<3; j++, hX++) {
            var line = document.createElementNS(svgns, 'line');
            line.setAttributeNS(null, 'x1', (j * 100));
            line.setAttributeNS(null, 'x2', (j * 100)+100);
            line.setAttributeNS(null, 'y1', i);
            line.setAttributeNS(null, 'y2', i);
            line.setAttributeNS(null, 'stroke', 'pink');
            line.setAttributeNS(null, 'stroke-width', '6px');
            line.setAttributeNS(null, 'class', 'gameboard-line');
            line.setAttributeNS(null, 'data-coords', ("H|" + hX + "," + hY));
            svgEle.appendChild(line);
         }
         hY = hY + 2;
      }
   }

   function drawVertLines() {

      var vY = 1;

      for( var i=0; i<3; i++) {
         var vX = 0;
         for(var j=0; j<=300; j+=100, vX++) {
            var line = document.createElementNS(svgns, 'line');
            line.setAttributeNS(null, 'x1', j);
            line.setAttributeNS(null, 'x2', j);
            line.setAttributeNS(null, 'y1', (i * 100));
            line.setAttributeNS(null, 'y2', (i * 100)+100);
            line.setAttributeNS(null, 'stroke', 'pink');
            line.setAttributeNS(null, 'stroke-width', '6px');
            line.setAttributeNS(null, 'class', 'gameboard-line');
            line.setAttributeNS(null, 'data-coords', ("V|" + vX + "," + vY));
            svgEle.appendChild(line);
         }
         vY = vY + 2;
      }
   }

   function cleanupBoard() {

      // First hide the game board

      // Remove all of the lines from the board
      $('.gameboard-line').each(function() {
         $(this).remove();
      });

      $('.my-score-container .username').text("");
      $('.my-score-container .score').text("");
      $('.opponent-score-container .username').text("");
      $('.opponent-score-container .score').text("");

      $('.my-turn-indicator').text("");
      $('.my-turn-indicator').css('opacity', '0');

      $('#gameboard-container').hide();

   }

   function lineClicked(event) {

      var line = $(event.target);


      // ***** Gets the coords from the data attribute we sent on initializing the board
      console.log('Line coords: ' + line.attr('data-coords'));

      var lineData = line.attr('data-coords').split('|');
      var lineDirection = lineData[0]; // Vertical 'V' or Horizontal 'H'
      var lineCoords = lineData[1].split(',');
      var xCoord = parseInt(lineCoords[0]);
      var yCoord = parseInt(lineCoords[1]);

      console.log('Direction: ' + lineDirection);
      console.log('X: ' + xCoord);
      console.log('Y: ' + yCoord);

      // Ensure the values haven't been manually changed to strings
      // ********* Check server side that the passed in coords are valid by checking against the boad dimensions
      if( !isNaN(xCoord) && !isNaN(yCoord) ) {
         console.log('Both values are numbers.');
         socket.emit('check move', {gameID: docCookies.getItem('linesAppGame'), mover: cookieUsername,
         line: {direction: lineDirection, x: xCoord, y: yCoord}});
      }

   }


   // **** Game Helper Methods ****


   // Binds or removes an onclick listener for each of the lines
   function toggleLineListeners(bindListeners) {
      if(bindListeners) {
         $('.gameboard-line').bind('click', function(event) {
            lineClicked(event);
         });
         $('.gameboard-line').css('cursor', 'pointer');
      }
      else {
         $('.gameboard-line').unbind('click');
         $('.gameboard-line').css('cursor', 'auto');
      }
   }


   // Returns the line at the passed in coordinates
   function getLineByAttrs(line) {

      var selectorString = ".gameboard-line[data-coords='" + line.direction + "|" + line.x + "," + line.y + "']";

      var lineEle = $(selectorString);
      console.log(JSON.stringify(lineEle));
      console.log('Get element test, x1: ' + lineEle.attr('data-coords') );

      return lineEle;

   }


};

</script>
