<script>

window.onload = function() {


   // **** Get Client Cookies Sent From Server ****

   var cookieToken = docCookies.getItem('linesApp');
   var cookieUsername = docCookies.getItem('linesAppUser');

   console.log('Client Token: ' + cookieToken);
   console.log('Client Username: ' + cookieUsername);


   // **** Initialize Socket IO ****

   var socket = io(); // Default to connect to host that serves page


   // **** Initialize Online Users & Chat ****

   var onlineUsers = <%- JSON.stringify(users) %>; // 'users' passed in via EJS

   init(onlineUsers);


   // **** Start Socket IO Events ****

   // Immediately emit that user is online
   socket.emit('go online', {username: cookieUsername});

   // When a new user goes online
   socket.on('user online', function(username) {
      addOnlineUser(username);
      console.log(username + ' is online.');
   });

   // When a new user goes online
   socket.on('user offline', function(username) {
      removeOnlineUser(username);
      console.log(username + ' went offline.');
   });

   // When a user has sent a chat message
   socket.on('new chat message', function(message) {
      console.log(message.sender + ' says: ' + message.body);
      appendChatMessage(message);
   });

   // When another user challenges you to a game
   socket.on('challenge user', function(challenger) {
      console.log('Received a challege from ' + challenger);

      // Show a modal message allowing user to accept or deny a challenge
      displayChallengeModal(challenger);
   });


   // **** DOM Methods ****

   function init(users) {

      // Add all users that are currently online to the list of users
      for( var i=0; i<users.length; i++ ) {
         addOnlineUser(users[i].username);
      }

      // Set the submit handler for the form
      $('#compose-message-form').on('submit', function(){ sendMessage(event) });

   }

   function addOnlineUser(username) {

      var newUserItem = $('<li>');
      newUserItem.addClass('online-user');
      newUserItem.attr('id', ('user-' + username));
      newUserItem.text(username);

      var challengeUserBut = $('<button>');
      challengeUserBut.on('click', function(){ challengeUser(username, challengeUserBut); });
      challengeUserBut.text('Challenge');

      newUserItem.append(challengeUserBut);

      $('#online-users-list').prepend(newUserItem);
   }

   function removeOnlineUser(username) {
      var attrSelector = "#user-" + username;
      var userListItem = $(attrSelector);
      userListItem.remove();
   }

   function appendChatMessage(message) {

      // This is either our message, or someone else's

      if( message.sender === cookieUsername ) { // It's our message, make it blue
         var messageClass = "my-message";
      }
      else { // it's not ours, make it grey
         var messageClass = "not-my-message";
      }

      $('#messages-list').append($("<li class='message " + messageClass + "'><span class='sender'>" + message.sender + "</span><span class='body'>" + message.body + "</span></li>"));

   }

   function displayChallengeModal(challenger) {

      var challengeModal = "<div id='challenge-modal'><p><span id='challenger-username'>" + challenger + "</span> wants to play!</p>";
      challengeModal += "<div class='action-container'><button id='accept-challenge-but'>Accept</button><button id='reject-challenge-but'>Reject</button></div></div>";

      $(document.body).prepend(challengeModal);

      $('#accept-challenge-but').on('click', acceptChallenge);
      $('#reject-challenge-but').on('click', rejectChallenge);

   }


   // **** Onclick/Onsubmit Methods ****

   function acceptChallenge() {

      var challenger = $('#challenger-username').text();
      console.log('Accepted challenge from: ' + challenger);

      socket.emit('challenge accepted', {challenger: challenger, challengee: cookieUsername});

      $('#challenge-modal').remove();

   }

   function rejectChallenge() {

      var challenger = $('#challenger-username').text();
      console.log('Rejected challenge from: ' + challenger);

      // Consider sending a modal to the user if there's time
      //socket.emit('challenge rejected', {challenger: challenger, challengee: cookieUsername});

      $('#challenge-modal').remove();

   }

   function challengeUser(opponentUsername, challengeButton) {
      console.log('Challenge User: ' + opponentUsername);
      socket.emit('challenge request', {sender: cookieUsername, opponent: opponentUsername});
   }

   function sendMessage(event) {
      event.preventDefault();
      var message = $('#message-input').val();
      console.log('Send Message: ' + message);

      // DO VALIDATION CHECKS HERE
      socket.emit('send chat message', {sender: cookieUsername, body: message});
   }



   // **************** GAME LOGIC ****************

   var svgEle = document.getElementsByTagName('svg')[0];
   var svgns = "http://www.w3.org/2000/svg";



   // **** Socket IO Game Events ****

   socket.on('initialize game', function(data) {

      initializeGame(data);

   });

   socket.on('my turn', function(data) {

      console.log('My turn!');

      // Enable interaction with the lines
      toggleLineListeners(true);

      if( data.opponentsMove != null ) { // Will only be null on first turn of game

         console.log('Update UI for opponents move x1: ' + data.opponentsMove.x1);

         var lineToUpdate = getLineByAttrs(data.opponentsMove);
         lineToUpdate.css('stroke', 'red');
         lineToUpdate.css('stroke-width', '6px');

      }

   });

   socket.on('valid move', function(data) {

      // Disable interaction with the lines
      toggleLineListeners(false);

      console.log('Valid move.');

      var lineToUpdate = getLineByAttrs(data.coordinates);
      lineToUpdate.css('stroke', 'green');
      lineToUpdate.css('stroke-width', '6px');

      socket.emit('done turn', {gameRoom: docCookies.getItem('linesAppGameRoom'), mover: cookieUsername, coordinates: data.coordinates});

   });



   // **** Game DOM Methods ****



   function initializeGame(gameData) {

      console.log('Initializing game...');

      // Store the gameID and the room in cookies so we can pass them around events
      docCookies.setItem('linesAppGame', gameData.gameID);
      docCookies.setItem('linesAppGameRoom', gameData.gameRoom);

      buildBoard();
      createScoreboard(gameData.players);

      // Now set the board to display block so it's visible
      $('#gameboard-container').show();



      console.log('First turn user:' + gameData.firstTurn);
      if( gameData.firstTurn == cookieUsername ) { // I go first

         console.log('I go first!'); // Consider showing a popup saying that you go first or second here

         socket.emit('start game');
      }

   }

   // Initialize the scoreboard with both players' usernames, starting with a score of zero
   function createScoreboard(players) {

      console.log('Creating scoreboard...');

      if(players[0] == cookieUsername) { // first index [0] in the players array is us
         $('.my-score-container .username').text(players[0]);
         $('.opponent-score-container .username').text(players[1]);
      }
      else { // players[1] is us
         $('.my-score-container .username').text(players[1]);
         $('.opponent-score-container .username').text(players[0]);
      }

      // Set both players starting scores to zero
      $('.my-score-container .score').text("0");
      $('.opponent-score-container .score').text("0");

   }

   function buildBoard() {

      console.log('Building board...');

      for( var i=0; i<=400; i+=100) {
         for(var j=0; j<4; j++) {
            var line = document.createElementNS(svgns, 'line');
            line.setAttributeNS(null, 'x1', (j * 100));
            line.setAttributeNS(null, 'x2', (j * 100)+100);
            line.setAttributeNS(null, 'y1', i);
            line.setAttributeNS(null, 'y2', i);
            line.setAttributeNS(null, 'stroke', 'pink');
            line.setAttributeNS(null, 'stroke-width', '6px');
            line.setAttributeNS(null, 'class', 'gameboard-line');
            // line.setAttributeNS(null, 'style', 'cursor: pointer');
            svgEle.appendChild(line);
         }
      }
      for( var i=0; i<=400; i+=100) {
         for(var j=0; j<=4; j++) {
            var line = document.createElementNS(svgns, 'line');
            line.setAttributeNS(null, 'x1', i);
            line.setAttributeNS(null, 'x2', i);
            line.setAttributeNS(null, 'y1', j * 100);
            line.setAttributeNS(null, 'y2', (j * 100)+100);
            line.setAttributeNS(null, 'stroke', 'pink');
            line.setAttributeNS(null, 'stroke-width', '6px');
            line.setAttributeNS(null, 'class', 'gameboard-line');
            // line.setAttributeNS(null, 'style', 'cursor: pointer');
            svgEle.appendChild(line);
         }
      }
   }

   function lineClicked(event) {

      var line = $(event.target);
      console.log('Line clicked at x1: ' + line.attr('x1'));
      console.log('Game ID: ' + docCookies.getItem('linesAppGame'));
      socket.emit('check move', {gameID: docCookies.getItem('linesAppGame'), mover: cookieUsername, x1: line.attr('x1'), x2: line.attr('x2'), y1: line.attr('y1'), y2: line.attr('y2')});

   }


   // **** Game Helper Methods ****


   // Binds or removes an onclick listener for each of the lines
   function toggleLineListeners(bindListeners) {
      if(bindListeners) {
         $('.gameboard-line').bind('click', function(event) {
            lineClicked(event);
         });
         $('.gameboard-line').css('cursor', 'pointer');
      }
      else {
         $('.gameboard-line').unbind('click');
         $('.gameboard-line').css('cursor', 'auto');
      }
   }


   // Returns the line at the passed in coordinates
   function getLineByAttrs(coords) {

      var selectorString = ".gameboard-line[x1='" + coords.x1 + "']" + "[x2='" + coords.x2 + "']";
      selectorString += "[y1='" + coords.y1 + "']" + "[y2='" + coords.y2 + "']";

      var lineEle = $(selectorString);
      console.log(JSON.stringify(lineEle));
      console.log('Get element test, x1: ' + lineEle.attr('x1') );

      return lineEle;

   }


};

</script>
